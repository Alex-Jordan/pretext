<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="webwork-publisher">
  <title><webwork/> Exercises</title>
  <idx>
    <h><webwork/></h>
    <h><webwork/> exercises</h>
  </idx>
  <author>Alex Jordan</author>

  <introduction>
    <p>
      You can embed <webwork/> exercises in your <pretext/> project. This requires using either a
      <c>webwork2</c> server that is version 2.16 or later, or a PG renderer that uses PG 2.19 or
      later. Either of these could be AIM servers that have been set up for this purpose, so to get
      started, there is no need to establish your own <c>webwork2</c> server or PG renderer.
    </p>
    <p>
      Part of the process can optionally be sped up by using a local copy of the <c>pg</c>
      repository.
    </p>
    <p>
      PDF and other static output formats will display static versions. HTML output can have
      interactive exercises or display problems in static form. If the HTML book is hosted on
      Runestone, reader interactions can be recorded so that scores can be given to students.
    </p>
    <p>
      All such exercises can be archived into a file tree to be uploaded onto a <c>webwork2</c>
      server for use in the <q>traditional</q> way.
    </p>
    <p>
      See <xref ref="webwork-author"/> for how to include or create <webwork/> problems in your
      source.
    </p>
  </introduction>

  <section xml:id="webwork-local-pg-static-processing">
    <title>Using a local copy of PG</title>
    <p>
      <webwork/> problems can be processed using a local copy of the <c>pg</c> repository. This can
      siginificanlty speed up processing time, compared with the other options that use a network
      connection.
    </p>
    <p>
      To use this processing method, clone the <c>pg</c> repository. The code below places it in a
      default location, but you could place it somewhere else.
      <cd>
        <cline>cd /opt</cline>
        <cline>mkdir webwork</cline>
        <cline>cd webwork</cline>
        <cline>git clone https://github.com/openwebwork/pg</cline>
      </cd>
    </p>
    <p>
      Now in a publisher file, you can set the <tag>webwork</tag> element to have
      <attr>static-processing</attr> with value <c>local</c>. If you put the <c>pg</c> repository
      in the default location, this is all you need to do. Otherwise, you also need to add the
      attribute <attr>pg-location</attr> with the absolute path, for example <c>/opt/webwork/pg</c>.
    </p>
    <p>
      Note that you will still need a network connection for problems in your HTML output to render
      as live interactive exercises.
    </p>
  </section>

  <section xml:id="webwork-renderer-static-processing">
    <title>Using a PG rendering service</title>
    <p>
      <webwork/> problems can be processed using a standalone PG renderer. At this time, this
      feature is under development. There is one functional renderer on an AIM server. We hope to
      make the renderer something that is easy for anyone to install at other locations. The
      renderer is more lightweight than a <c>webwork2</c> server and runs significantly faster
      (although not as fast as using local <c>pg</c>).
    </p>
    <p>
      To use this processing method, in a publisher file, you can set the <tag>webwork</tag> element
      to have <attr>static-processing</attr> with value <c>renderer</c>. This will use the AIM
      instance of the renderer. When the renderer becomes something you can install on other
      servers, you will have another publisher option to specify where it is.
    </p>
    <p>
      At this time, you will still need to use a <c>webwork2</c> server for problems in your HTML
      output to render as live interactive exercises.
    </p>
  </section>

  <section xml:id="webwork-server-configuration">
    <title>Configuring a <webwork/> Server for <pretext/></title>
    <p>
      Note that the default <webwork/> server for <pretext/> is
      <url href="https://webwork-ptx.aimath.org" visual="webwork-ptx.aimath.org"/>, and this server
      is already configured. If you are configuring your own <webwork/> server, read on.
    </p>
    <p>
      We assume a mild familiarity with administrating a <webwork/> server. The version of
      <webwork/> needs to be 2.16 or later for use with <pretext/>.
    </p>
    <p>
      The only thing you need to do at this level is set the web server to use certain headers on
      content that is fetched. These headers tell a web browser that you are authorizing it to
      display content from this web server as embedded content inside pages from another web server
      (in particular, where you are hosting you <pretext/> book).
    </p>
    <paragraphs>
      <title><webwork/> 2.16 or 2.17</title>
      <p>
        In <c>webwork2/conf/</c> there should be the apache configuration file
        <c>webwork-apache2.4-config</c>. This file needs to include the lines:
      </p>
      <pre>
        <![CDATA[
        <IfModule mod_headers.c>
            <Location /webwork2/html2xml>
                Header set Access-Control-Allow-Origin "*"
            </Location>
            <Location /webwork2_files>
                Header set Access-Control-Allow-Origin "*"
            </Location>
        </IfModule>
        ]]>
      </pre>
      <p>
        Note there is the distribution file <c>webwork-apache2.4-config.dist</c>, which has these
        lines (or similar lines) commented out.
      </p>
      <p>
        You may also need to enable headers by executing something like <c>sudo a2enmod headers</c>
        from the command line.
      </p>
    </paragraphs>
    <paragraphs>
      <title><webwork/> 2.18</title>
      <p>
        Edit <c>webwork2/conf/webwork2.mojolicious.yml</c> and uncomment these lines:
      </p>
      <pre>
        extra_headers:
        #  /webwork2/render_rpc:
        #    Access-Control-Allow-Origin: '*'
           /webwork2/html2xml:
             Access-Control-Allow-Origin: '*'
           /webwork2_files:
             Access-Control-Allow-Origin: '*'
           /pg_files:
             Access-Control-Allow-Origin: '*'
      </pre>
      <p>
        Note the <c>render_rpc</c> lines can remain commented out, unless you have some other reason
        to uncomment them.
      </p>
      <p>
        You will need to restart the <c>webwork2</c> service.
      </p>
    </paragraphs>
    <paragraphs>
      <title><webwork/> 2.19</title>
      <p>
        Edit <c>webwork2/conf/webwork2.mojolicious.yml</c> and uncomment these lines:
      </p>
      <pre>
        extra_headers:
           /webwork2/render_rpc:
             Access-Control-Allow-Origin: '*'
        #  /webwork2/html2xml:
        #    Access-Control-Allow-Origin: '*'
           /webwork2_files:
             Access-Control-Allow-Origin: '*'
           /pg_files:
             Access-Control-Allow-Origin: '*'
      </pre>
      <p>
        Note the <c>html2xml</c> lines can remain commented out, unless you have some other reason
        to uncomment them.
      </p>
      <p>
        Also in this same file, set <c>allow_unsecured_rpc: 1</c>.
        You will need to restart the <c>webwork2</c> service.
      </p>
    </paragraphs>
  </section>

  <section xml:id="webwork-course-configuration">
    <title>Configuring a <webwork/> Course for <pretext/></title>
    <p>
      To make use of <webwork/> in your <pretext/> project, you need a host <webwork/> course. If
      someone is providing a <webwork/> server for you, like the AIM server at
      <url href="https://webwork-ptx.aimath.org" visual="webwork-ptx.aimath.org"/>, then we assume
      they have already configured a course for use with <pretext/>, and you may skip this section
      and move on to <xref ref="webwork-processing">Section</xref>.
    </p>
    <p>
      If you are configuring your own <webwork/> server to use with <pretext/>, we assume a mild
      familiarity with administrating a <webwork/> server. The version of <webwork/> needs to be
      2.16 or later for use with <pretext/>.
    </p>
    <p>
      Using the <c>admin</c> course, create a course named <c>anonymous</c>. (You could name it
      something else, but we assume the name is <c>anonymous</c> in this guide.) In the course's
      Course Configuration menu, set all permissions to <c>admin</c> (or perhaps set some to the
      even more restrictive <c>nobody</c>). Except set <q>Allowed to login to the course</q> to
      <c>login_proctor</c>. Also if your server is new enough, it has
      <q>Allowed to view course home page</q> which should also be set to <c>login_proctor</c>.
    </p>
    <p>
      In the Accounts Manager, add a user named <c>anonymous</c> (again, you could use some other
      name), and set that user's permission level to <c>login_proctor</c>, the permission level one
      higher than <c>student</c>. Set that user's password to <c>anonymous</c> (again, you could use
      some other password). Note that because this is public information, anyone will be able to log
      into this course as this user. This is why restricting permissions in the previous paragraph
      is very important.
    </p>
    <p>
      Add the following lines to the <c>course.conf</c> file (which lives in the parent folder of
      the <c>templates/</c> folder.)
    </p>
    <pre>
      # Hide message about previewing hints and solutions for instructors
      $pg{specialPGEnvironmentVars}{ALWAYS_SHOW_HINT_PERMISSION_LEVEL} = 100;
      $pg{specialPGEnvironmentVars}{ALWAYS_SHOW_SOLUTION_PERMISSION_LEVEL} = 100;
    </pre>
    <paragraphs>
      <title><webwork/> 2.16, 2.17, or 2.18 (not needed for 2.19 or later)</title>
      <p>
        In the <c>templates/macros/</c> folder, edit <c>PGcourse.pl</c> (or create it if need be)
        and add the following lines.
      </p>
      <pre>
        #### Replace essay boxes with a message
        my $essay_message = 'If you were logged into a WeBWorK course '
            . 'and this problem were assigned to you, '
            . 'you would be able to submit an essay answer '
            . 'that would be graded later by a human being.';

        sub essay_box {
          my $out = MODES(
            TeX => '',
            Latex2HTML => '',
            HTML => qq!&lt;p>$essay_message&lt;/p>!,
            PTX => '',
          );
          $out;
        };

        sub explanation_box {
          return if ($envir{waiveExplanations});
          my $out = MODES(
            TeX => '',
            Latex2HTML => '',
            HTML => qq!&lt;p>$essay_message&lt;/p>!,
            PTX => '',
          );
          $out;
        };

        #### Suppress essay help link
        sub essay_help {};

        #### How many attempts until hint is available
        $showHint = -1;
        # May be a bug that WeBWorK requires -1 instead of 0
        # for immediate access to hints

        1;
      </pre>
    </paragraphs>
    <p>
      Now <pretext/> will be able to communicate with this course to retrieve what is needed.
    </p>
  </section>

  <section xml:id="webwork-pg-macros">
    <title>PG Macros from the <pretext/> source</title>
    <p>
      The project's <webwork/> exercises may rely on PG macros that are written into the project's
      source. For example, the exercises might have TikZ images that rely on
      <tag>docinfo/latex-image-preamble</tag>.
    </p>
    <p>
      For this, a PG macro library file must be built and placed wherever it is needed. To build
      this macro library, run:
      <cd>
        pretext/pretext/pretext -c pg-macros -p publication.xml mainfile.ptx
      </cd>
      <ul>
        <li>
          <q><c>publication.xml</c></q> should be your project's publisher file that declares a
          generated folder, and you may need to include the path to this file.
        </li>
        <li>
          <q><c>mainfile.ptx</c></q> should be the main file for your <pretext/> project.
        </li>
      </ul>
      This will place the PG macro file in <c>generated/webwork/pg/[TITLE]/macros/</c> where
      <c>[TITLE]</c> is a file-safe version of the title of your project.
    </p>
    <p>
      If the project's source changes in such a way that these PG macros would change, this file
      should be regenerated.
    </p>
  </section>

  <section xml:id="webwork-processing">
    <title>Processing <webwork/> Exercises</title>

    <subsection xml:id="webwork-representations">
      <title>Extraction and Processing</title>
      <p>
        Before anything else can be done, a <pretext/> project with <webwork/> problems must first
        have its <webwork/> content extracted and processed into multiple representations, which are
        then collected into an auxiliary XML file. Using the CLI, this is done with
        <c>pretext generate webwork</c> (if you want to reference a particular target, add
        <c>-t [targetname]</c>).
      </p>

      <p>
        If instead you want to use the <c>pretext/pretext/pretext</c> script, you might need to
        install the Python <c>requests</c> module. It is not uncommon for your computer to not have
        <c>requests</c> installed (although it comes with the CLI), so you should check if it is
        there and install it if need be. You can check if it is installed from the command line
        with:
        <cd>
          python -c "import requests"
        </cd>
        And if it isn't, you can install it with <c>pip</c>, specifically with:
        <cd>
          pip install requests
        </cd>
        (If you don't have <c>pip</c> installed, you could use:
        <cd>
          easy_install pip
        </cd>
        to install it.)
      </p>
      <p>
        Processing <webwork/> problems is best accomplished if you are using directory management.
        With a publication file, declare the external and generated directories as describe in
        <xref ref="processing-directory-management"/>. Then use the <c>pretext</c> script to extract
        <pretext/> content from the <webwork/> server. It will be placed in a <c>webwork</c>
        subfolder of your generated folder. For example:
      </p>
      <console>
        <input prompt="$ ">pretext -c webwork -p &lt;publisher&gt; aota.ptx</input>
      </console>
      <p>
        <c>aota.ptx</c> in the example is the root file for your <pretext/> project.
      </p>
      <warning>
        <title>File Paths</title>
        <p>
          In the previous example and those that follow, you should specify paths as needed. For
          example, the <c>pretext</c> script is typically at <c>~/pretext/pretext/pretext</c>. And
          the <c>-p</c> option is specifying a publication file.
        </p>
      </warning>
      <p>
        <c>-c webwork</c> means you are processing the <webwork/> components.
      </p>
      <p>
        <c>-p</c> specifies the publication file, as described in
        <xref ref="publication-file-reference"/>. In the publication file, the <tag>webwork</tag>
        element may have attributes <attr>server</attr>, <attr>course</attr>, <attr>user</attr>,
        and <attr>password</attr>. (If the <webwork/> version is 2.18 or earlier, there should be
        <attr>coursepassword</attr> and <attr>userpassword</attr> instead of <attr>password</attr>.)
        <attr>server</attr> defaults to <c>https://webwork-ptx.aimath.org</c>, and all the others
        default to <c>anonymous</c>. If you specify a server, you must correctly specify the
        protocol (<c>http</c> versus <c>https</c>). And it must be a server using version 2.16 or
        later. Do not include a trailing slash.
      </p>
    </subsection>

    <subsection xml:id="webwork-html-output">
      <title>HTML output</title>

      <p>
        We assume you are using managed directories, and have <webwork/> representations file as
        above.  Build the HTML with <c>pretext build TARGET</c> where <c>TARGET</c> is the name of
        a target that has <c>format="html"</c>. You can also use <c>pretext/pretext</c> to build
        HTML. For example:
      </p>
      <console>
        <input prompt="$ ">pretext -c all -f html -p &lt;publisher&gt; -d &lt;destination&gt; aota.ptx</input>
      </console>
      <p>
        <c>-p</c> specifies the publication file, as described in <xref ref="publication-file-reference"/>.
      </p>
      <p>
        <c>-d</c> specifies a folder to place all of the HTML output.
        If unspecified, this will be the current working directory.
      </p>
      <p>
          There are five publisher file entries which  control how a <webwork/> problem is realized within <init>HTML</init> output.  These are divided based on where the exercise (or project-like) resides: inline, within a division of exercises, within a reading questions division, within a worksheet, or if it is a project or similar.  If the class of problems is declared <c>dynamic</c>, then each problem has a button that readers can click to make the problem interactive.  Conversely, if the class of problems is declared <c>static</c>, then the problems render with a static preview.
        </p>
        <p>
          By default, inline exercises and project-like will be dynamic, under the assumption that these are meant to be worked as a reader works through the material.  The others will be static, under the assumption that they will be placed on a WeBWorK server where they will be worked for scores and grades.  See <xref ref="online-webwork-dynamism"/> for the precise syntax for these switches.
        </p>
      <p>
        If an exercise is subdivided into tasks, then by default they will only be revealed incrementally
        as the reader answers each one correctly. If you would like to have all tasks revealed from the start,
        then this option may be elected in the publication file (see <xref ref="publication-file-webwork-task-reveal"/>).
      </p>
    </subsection>

    <subsection xml:id="webwork-latex-output">
      <title><latex/> output</title>

      <p>
        We assume you are using managed directories, and have <webwork/> representations file as above.  Then build as normal with the CLI.  Or
        you may use <c>pretext/pretext</c> to build a <latex/> PDF. For example:
      </p>
      <console>
        <input prompt="$ ">pretext -c all -f pdf -p &lt;publisher&gt; -d &lt;destination&gt; aota.ptx</input>
      </console>
      <p>
        <c>-p</c> specifies the publication file, as described in <xref ref="publication-file-reference"/>.
      </p>
      <p>
        <c>-d</c> specifies a folder to place the PDF output.
        If unspecified, this will be the current working directory.
      </p>
    </subsection>

    <subsection>
      <title>Creating Files for Uploading to <webwork/></title>

      <p>
        All of the <tag>webwork</tag> that you have written into your project can be <q>harvested</q>
        and put into their own <c>.pg</c> files by the <c>pretext</c> script.
        These files are created with a folder structure that follows the chunking scheme you specify.
        This process also creates set definition files (<c>.def</c>) for each chunk (say, for each section):
        one for inline exercises (checkpoints) and one for divisional exercises.
        For <tag>webwork</tag> problems that come from the <webwork/> server,
        the <c>.def</c> file will include them as well.
        This archiving process creates set header <c>.pg</c> files for each set definition.
      </p>
      <p>
        For example:
      </p>
      <console>
        <input prompt="$ ">xsltproc -stringparam publisher &lt;publisher&gt; pretext-ww-problem-sets.xsl aota.ptx</input>
      </console>
      <p>
        You may need to specify paths to these files.
      </p>
      <p>
        With a book, you can break up your problem set into multiple files according to a chosen depth of the hierarchy.  See <xref ref="common-chunking-options"/> for details on how to specify this.
      </p>
      <p>
        This creates a folder named after your book title,
        which has a folder tree with all of the <c>.pg</c> and <c>.def</c> files laid out according to your chunk level.
        You can compress this folder and upload it into an active <webwork/> course
        where you may then assign the sets to your students (and modify, as you like).
      </p>
    </subsection>
  </section>

  <section>
    <title>Unachievable Conversions</title>

    <p>
      By authoring <webwork/> problems within <pretext/> you do not need to learn all the ins and outs of <init>PGML</init> markup
      and you can concentrate on simply becoming proficient with <pretext/>.
      However, there are a few <pretext/> constructions which are not achievable in a <webwork/> problem
      for one reason or another.
      We list exceptions here, and also try to use source-checking tools to alert you to any differences.
      <ul>
        <li>
          <p>
            Anything that is the numbered target of a cross-reference, such as a figure,
            may not be inside a <webwork/> exercise.
            The exercise may go on to have a life of its own independent of its parent <pretext/> project,
            and then such a number makes no sense.
          </p>
        </li>
        <li>
          <p>
            When constructing a list (<tag>ul</tag> or <tag>ol</tag>)
            specifying some number of columns (using the <attr>cols</attr> attribute)
            will be ignored. PGML markup has no way to declare multicolumn lists.
          </p>
        </li>
      </ul>
    </p>
  </section>

</chapter>
